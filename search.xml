<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[call() apply() and bind() in javaScript]]></title>
    <url>%2F2019%2F11%2F04%2Fcall-apply-and-bind-in-javaScript%2F</url>
    <content type="text"><![CDATA[老生常谈的问题 How-to: call() , apply() and bind() in JavaScript]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于JS数组你可能不知道的事情]]></title>
    <url>%2F2019%2F07%2F23%2F%E5%85%B3%E4%BA%8EJS%E6%95%B0%E7%BB%84%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B%E6%83%85%2F</url>
    <content type="text"><![CDATA[类数组JavaScript 提供是类数组（array-like）特性的对象 长度 length属性的值是一个0-2^32-1的整数 设置更大的length不会给数组分配更多的空间 而把length设小将导致所有下表大于等于新length的属性被删除 123// 这两种写法都可以number[’numbers.length] = ’shi’; // 这种性能是不是会更好一点？numbers.push(‘go); 删除123456delete numbers[2]; // 可以用delete运算符// numbers 是 [‘zero’, ‘one’, undefined, ’shi’, ‘go’]numbers.splice(2, 1); // 也可以用splice 一般用这个// numbers 是 [‘zero’, ‘one’, ’shi’, ‘go’]// 因为被删除属性后面的每个属性必须被移除，并且以一个新的键值重新插入，这对于大型数组来说可能会效率不高。--这个需要注意下 区分对象和数组1234567if (!Array.isArray) &#123; Array.isArray = function(arg) &#123; return Object.prototype.toString.call(arg) === '[object Array]'; &#125;;&#125;// 鲜为人知的事实：其实 Array.prototype 也是一个数组。Array.isArray(Array.prototype); 指定初始值一维数组指定初始值1234567891011121314Array.dim = function (dimension, initial) &#123; let arr = []; for (let i = 0; i &lt; dimension; i++) &#123; arr[i] = initial; &#125; return arr;&#125;var myArray = Array.dim(10, 1);var myArray2 = Array.dim(10, []); // 注意这样会导致变量都指向一个数组的引用 后果不堪设想// console.log(myArray);// console.log(myArray2);myArray2[3][9] = 1; // 不堪设想的后果// console.log(myArray2); // 后果不堪设想了 二维数组指定初始值12345678910111213141516171819202122232425262728293031323334if (!Array.isArray) &#123; Array.isArray = function (arg) &#123; return Object.prototype.toString.call(arg) === '[object Array]'; &#125;;&#125;Array.dim = function (m, n, initial) &#123; let r = []; for (let i = 0; i &lt; m; i++) &#123; r[i] = []; for (let j = 0; j &lt; n; j++) &#123; if (typeof initial === 'object') &#123; if (Array.isArray(initial)) &#123; r[i][j] = [ ...initial ]; &#125; else &#123; r[i][j] = &#123; ...initial &#125;; &#125; &#125; else &#123; r[i][j] = initial; &#125; &#125; &#125; return r;&#125;let myArray = Array.dim(10, 20, 0);let myArray2 = Array.dim(10, 20, [9, 10]);let myArray3 = Array.dim(10, 20, &#123; abc: 1 &#125;);myArray[0][1] = 9;myArray2[1][2][10] = 10;myArray3[1][2][0] = 1;// console.log(myArray);// console.log(myArray2);// console.log(myArray3); 实现单位矩阵12345678910Array.identity = function (n) &#123; let mat = Array.dim(n, n, 0); for (let index = 0; index &lt; n; index++) &#123; mat[index][index] = 1; &#125; return mat;&#125;let myArray4 = Array.identity(4);console.log(myArray4);]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Arrow Function]]></title>
    <url>%2F2019%2F07%2F17%2FArrow-Function%2F</url>
    <content type="text"><![CDATA[简介箭头函数允许我们用更简单的方式书写函数表达式 之前: 123hello = function() &#123; return "hello world!";&#125; 使用箭头函数之后: 123hello = () =&gt; &#123; return "hello world!";&#125; 表达式变得更加简短简洁！如果函数只有一个声明，而且声明返回了一个值，你可以移除花括号和return这个关键字 箭头函数默认返回值 1hello = () =&gt; "hello world!"; 注意：在函数只有一个声明的情况下才适用 如果有参数的情况下，你需要把参数传递到括号中 带参数的箭头函数 1hello = (val) =&gt; "hello" + val; 事实上，如果只有一个参数的情况下，你也可以省略括号 1hello = val =&gt; "hello" + val; 谈谈 this相对于普通函数来讲，箭头函数对 [this] 的处理是不同的。 简而言之，箭头函数在使用时并没有对 [this] 进行绑定。 在普通的函数中 [this] 关键字代表了调用函数的对象，这个对象可能是window，document，一个button按钮或别的。 使用箭头函数的时候 [this] 关键字代表了定义箭头函数的对象。 让我们用两个例子来理解这个区别。 两个例子都调用了同一个方法两次，第一次调用是在页面加载的时候(loads)，第二次是当用户点击一个按钮的时候。 第一个例子用了一个普通的函数，第二个例子用了箭头函数。 结果表明，第一个例子返回了两个不同的对象(window and button),第二个例子返回了两次window对象，因为window对象是箭头函数的所有者。 Example普通函数中，[this] 指向 调用 函数的对象 12345678910// 普通函数hello = function() =&gt; &#123; document.getElementById("demo").innerHTML += this;&#125;// window对象调用了这个函数window.addEventListener("load", hello);// button对象调用了这个函数document.getElementById("btn").addEventListener("click", hello); Example箭头函数中，[this] 指向 调用 函数的所有者 12345678910// 箭头函数hello = () =&gt; &#123; document.getElementById("demo").innerHTML += this;&#125;// window对象调用了这个函数window.addEventListener("load", hello);// button对象调用了这个函数document.getElementById("btn").addEventListener("click", hello); 当你用函数的时候记住这些不同。有时候普通函数的行为是你想要的，如果不是，用箭头函数。 Arrow Function | w3school]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Diy loading with h5 + css3]]></title>
    <url>%2F2019%2F07%2F07%2FDiy-loading-with-h5-css3%2F</url>
    <content type="text"><![CDATA[html 1234567891011121314&lt;div id='j_page-loading' class='m-actloading' style='background-color:rgba(4, 18, 34, 1)'&gt; &lt;div class='loading' style='color:rgba(255, 255, 255, 1)'&gt; &lt;div class='bars'&gt; &lt;span class='loading-bar b1' style='background-color:rgba(255, 255, 255, 1)'&gt;&lt;/span&gt; &lt;span class='loading-bar b2' style='background-color:rgba(255, 255, 255, 1)'&gt;&lt;/span&gt; &lt;span class='loading-bar b3' style='background-color:rgba(255, 255, 255, 1)'&gt;&lt;/span&gt; &lt;span class='loading-bar b4' style='background-color:rgba(255, 255, 255, 1)'&gt;&lt;/span&gt; &lt;span class='loading-bar b5' style='background-color:rgba(255, 255, 255, 1)'&gt;&lt;/span&gt; &lt;span class='loading-bar b6' style='background-color:rgba(255, 255, 255, 1)'&gt;&lt;/span&gt; &lt;span class='loading-bar b7' style='background-color:rgba(255, 255, 255, 1)'&gt;&lt;/span&gt; &lt;/div&gt; &lt;span class='loading-tip'&gt;loading&lt;i class='dots d1'&gt;.&lt;/i&gt;&lt;i class='dots d2'&gt;.&lt;/i&gt;&lt;i class='dots d3'&gt;.&lt;/i&gt;&lt;/span&gt; &lt;/div&gt;&lt;/div&gt; css 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142/* loading */.m-actloading &#123; position: fixed; z-index: 10000; top: 0; left: 0; width: 100%; height: 100%; background-color: hsla(0, 0%, 86%, .95); font-size: 16px; font-weight: 700; color: #d43c33; touch-action: none; -webkit-transition: all .6s ease-in; transition: all .6s ease-in; display: block;&#125;.m-actloading .loading &#123; position: absolute; top: 45%; left: 50%; margin-left: -22px; height: 28px; font-size: 0; text-align: center; white-space: nowrap&#125;.m-actloading .loading .bars &#123; width: 100%; height: 100%; overflow: hidden&#125;.m-actloading .loading .loading-bar &#123; display: inline-block; width: 2px; height: 100%; background-color: #d43c33; border-radius: 2px; -webkit-animation-name: loadingUpanddown; animation-name: loadingUpanddown; -webkit-animation-duration: .3s; animation-duration: .3s; -webkit-animation-timing-function: linear; animation-timing-function: linear; -webkit-animation-iteration-count: infinite; animation-iteration-count: infinite; -webkit-animation-direction: alternate; animation-direction: alternate; margin-right: 5px&#125;.m-actloading .loading .loading-bar:last-child &#123; margin-right: 0&#125;.m-actloading .loading .loading-bar.b1 &#123; -webkit-animation-delay: -.1s; animation-delay: -.1s&#125;.m-actloading .loading .loading-bar.b2 &#123; -webkit-animation-delay: -.2s; animation-delay: -.2s&#125;.m-actloading .loading .loading-bar.b3 &#123; -webkit-animation-delay: -.3s; animation-delay: -.3s&#125;.m-actloading .loading .loading-bar.b4 &#123; -webkit-animation-delay: -.4s; animation-delay: -.4s&#125;.m-actloading .loading .loading-bar.b5 &#123; -webkit-animation-delay: -.5s; animation-delay: -.5s&#125;.m-actloading .loading .loading-bar.b6 &#123; -webkit-animation-delay: -.6s; animation-delay: -.6s&#125;.m-actloading .loading .loading-bar.b7 &#123; -webkit-animation-delay: -.7s; animation-delay: -.7s&#125;.m-actloading .loading .loading-tip &#123; position: absolute; top: 41px; left: 50%; margin-left: -50%; font-size: 12px; opacity: .8&#125;.m-actloading .loading .loading-tip .dots &#123; -webkit-animation: 1s ease 0s infinite alternate loadingDots; animation: 1s ease 0s infinite alternate loadingDots&#125;.m-actloading .loading .loading-tip .dots.d2 &#123; -webkit-animation: 1s ease -.1s infinite alternate loadingDots; animation: 1s ease -.1s infinite alternate loadingDots&#125;.m-actloading .loading .loading-tip .dots.d3 &#123; -webkit-animation: 1s ease -.2s infinite alternate loadingDots; animation: 1s ease -.2s infinite alternate loadingDots&#125;@-webkit-keyframes loadingUpanddown &#123; to &#123; -webkit-transform: translateY(100%); transform: translateY(100%) &#125;&#125;@keyframes loadingUpanddown &#123; to &#123; -webkit-transform: translateY(100%); transform: translateY(100%) &#125;&#125;@-webkit-keyframes loadingDots &#123; to &#123; opacity: 0 &#125;&#125;@keyframes loadingDots &#123; to &#123; opacity: 0 &#125;&#125;]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
</search>
