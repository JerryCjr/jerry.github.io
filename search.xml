<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Connect VPN(L2TP) ERROR]]></title>
    <url>%2F2020%2F02%2F26%2FConnect-VPN-L2TP-ERROR%2F</url>
    <content type="text"><![CDATA[Mac 环境下连接 VPN 问题记录错误信息如图 系统信息如下 解决方案12cd ~/etc/ppprm -rf ./options]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>VPN</tag>
        <tag>L2TP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[line-height(1.5/150%/1.5em)有什么区别]]></title>
    <url>%2F2020%2F02%2F06%2Fline-height-1-5-150-1-5em-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[line-height 取值 1.5，150%，1，5em 究竟有什么区别line-height 属性值具有继承性，即父级所设置的属性值会在子级中集成，几个属性的区别： 1.5（纯数字）是在子级继承后重新根据自身的字体大小重新计算行高 1.5em 和 150%则会在父级计算完行高值后，原封不动的作用于子级元素 效果图 以上三种情况 父元素的字体都为 16px 子元素的字体都为 40px 行高为 150% 子元素的行高 = 父级的字体大小 x 150%,实际计算为 16 x 150% = 24,即子元素继承的行高为 24px.子元素的字号为 40px, 行高为 24px, 行高小于字体大小,计算两行文字之间的距离为 2x = 24 - 40 = -16px,所以两行文字重叠在了一起 行高为 1.5em（也是类似的） 行高为 1.5 子元素的行高 = 子级自己的字体大小 x 1.5,实际计算为 40 x 1.5 = 60,即子元素继承的行高为 60px.子元素的字号为 40px, 行高为 60px, 行高小于字体大小,计算两行文字之间的距离为 2x = 60 - 40 = 20px,所以两行文字不会重叠在一起 因此，我们在实际使用的过程中，绝大部分场景应该尽量的少用 em 和百分比值作为 line-height 的值，而使用 1.5,2 等不带单位的值替代。 源代码 html 123456789101112131415&lt;div class="container container1"&gt; &lt;p&gt; 我是子级元素，我的font-size为40px，继承line-height为150%。我是子级元素，我的font-size为40px，继承line-height为150%。我是子级元素，我的font-size为40px，继承line-height为150%。 &lt;/p&gt;&lt;/div&gt;&lt;div class="container container2"&gt; &lt;p&gt; 我是子级元素，我的font-size为40px，继承line-height为1.5em。我是子级元素，我的font-size为40px，继承line-height为1.5em。我是子级元素，我的font-size为40px，继承line-height为1.5em。 &lt;/p&gt;&lt;/div&gt;&lt;div class="container container3"&gt; &lt;p&gt; 我是子级元素，我的font-size为40px，继承line-height为1.5。我是子级元素，我的font-size为40px，继承line-height为1.5。我是子级元素，我的font-size为40px，继承line-height为1.5。 &lt;/p&gt;&lt;/div&gt; css 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950* &#123; margin: 0; padding: 0; box-sizing: border-box;&#125;.container &#123; position: relative; margin: 100px auto; width: 100vw; font-size: 16px; border: 1px solid red;&#125;.container::before &#123; position: absolute; width: 100%; height: 50px; left: 0; top: 0; margin-top: -30px;&#125;.container &gt; p &#123; font-size: 40px;&#125;.container1 &#123; line-height: 150%;&#125;.container1::before &#123; content: "我是父级元素，我的font-size为40px，继承line-height为150%";&#125;.container2 &#123; line-height: 1.5em;&#125;.container2::before &#123; content: "我是父级元素，我的font-size为40px，继承line-height为1.5em";&#125;.container3 &#123; line-height: 1.5;&#125;.container3::before &#123; content: "我是父级元素，我的font-size为40px，继承line-height为1.5";&#125; em 的几个需要注意的地方 em 的值并不是固定的； em 会继承父级元素的字体大小（参考物是父元素的 font-size；） em 中所有的字体都是相对于父元素的大小决定的；所以如果一个设置了 font-size:1.2em 的元素在另一个设置了 font-size:1.2em 的元素里，而这个元素又在另一个设置了 font-size:1.2em 的元素里，那么最后计算的结果是 1.2X1.2X1.2=1.728em 参考 css 中 px em rem 的区别 彻底搞定 vertical-align 垂直居中不起作用疑难杂症]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flex布局: justify-content]]></title>
    <url>%2F2020%2F02%2F06%2Fflex-justify-content%2F</url>
    <content type="text"><![CDATA[flex: justify-content效果效果一： row nowrap12345678910.container &#123; position: relative; width: 100%; margin: 50px auto 0; border: 1px solid red; display: flex; flex-direction: row; flex-wrap: nowrap;&#125; 效果二：row wrap12345678910.container &#123; position: relative; width: 100%; margin: 50px auto 0; border: 1px solid red; display: flex; flex-direction: row; flex-wrap: wrap;&#125; 遗留问题 justify-content: safe/unsafe center 的效果是什么？ justify-content: left/right 的效果是什么？ justify-content: start/end 的效果是什么？ 源代码 html 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge" /&gt; &lt;title&gt;justify-content&lt;/title&gt; &lt;link rel="stylesheet" href="./index.css" /&gt; &lt;/head&gt; &lt;body&gt; &lt;div class="app"&gt; &lt;!-- center --&gt; &lt;!-- /* Pack items around the center */ --&gt; &lt;div class="container container1"&gt; &lt;div class="box"&gt;box1&lt;/div&gt; &lt;div class="box"&gt;box2&lt;/div&gt; &lt;div class="box"&gt;box3&lt;/div&gt; &lt;div class="box"&gt;box4&lt;/div&gt; &lt;div class="box"&gt;box5&lt;/div&gt; &lt;/div&gt; &lt;!-- flex-start --&gt; &lt;!-- /* Pack flex items from the start */ --&gt; &lt;div class="container container2"&gt; &lt;div class="box"&gt;box1&lt;/div&gt; &lt;div class="box"&gt;box2&lt;/div&gt; &lt;div class="box"&gt;box3&lt;/div&gt; &lt;div class="box"&gt;box4&lt;/div&gt; &lt;div class="box"&gt;box5&lt;/div&gt; &lt;/div&gt; &lt;!-- flex-end --&gt; &lt;!-- /* Pack flex items from the end */ --&gt; &lt;div class="container container3"&gt; &lt;div class="box"&gt;box1&lt;/div&gt; &lt;div class="box"&gt;box2&lt;/div&gt; &lt;div class="box"&gt;box3&lt;/div&gt; &lt;div class="box"&gt;box4&lt;/div&gt; &lt;div class="box"&gt;box5&lt;/div&gt; &lt;/div&gt; &lt;!-- /* Distributed alignment */ --&gt; &lt;!-- space-around --&gt; &lt;!-- /* 在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素到行首的距离和每行最后一个元素到行尾的距离将会是相邻元素之间距离的一半。 */ --&gt; &lt;div class="container container4"&gt; &lt;div class="box"&gt;box1&lt;/div&gt; &lt;div class="box"&gt;box2&lt;/div&gt; &lt;div class="box"&gt;box3&lt;/div&gt; &lt;div class="box"&gt;box4&lt;/div&gt; &lt;div class="box"&gt;box5&lt;/div&gt; &lt;/div&gt; &lt;!-- space-between --&gt; &lt;!-- /* 在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素与行首对齐，每行最后一个元素与行尾对齐。 */ --&gt; &lt;div class="container container5"&gt; &lt;div class="box"&gt;box1&lt;/div&gt; &lt;div class="box"&gt;box2&lt;/div&gt; &lt;div class="box"&gt;box3&lt;/div&gt; &lt;div class="box"&gt;box4&lt;/div&gt; &lt;div class="box"&gt;box5&lt;/div&gt; &lt;/div&gt; &lt;!-- space-evenly --&gt; &lt;!-- /* flex项都沿着主轴均匀分布在指定的对齐容器中。相邻flex项之间的间距，主轴起始位置到第一个flex项的间距,，主轴结束位置到最后一个flex项的间距，都完全一样。 */ --&gt; &lt;div class="container container6"&gt; &lt;div class="box"&gt;box1&lt;/div&gt; &lt;div class="box"&gt;box2&lt;/div&gt; &lt;div class="box"&gt;box3&lt;/div&gt; &lt;div class="box"&gt;box4&lt;/div&gt; &lt;div class="box"&gt;box5&lt;/div&gt; &lt;/div&gt; &lt;!-- stretch --&gt; &lt;!-- /* 均匀排列每个元素 'auto'-sized 的元素会被拉伸以适应容器的大小 */ --&gt; &lt;div class="container container7"&gt; &lt;div class="box"&gt;box1&lt;/div&gt; &lt;div class="box"&gt;box2&lt;/div&gt; &lt;div class="box box3"&gt;box3&lt;/div&gt; &lt;div class="box"&gt;box4&lt;/div&gt; &lt;div class="box box5"&gt;box5&lt;/div&gt; &lt;/div&gt; &lt;!-- /* Distributed alignment */ --&gt; &lt;!-- /* Overflow alignment */ --&gt; &lt;!-- TODO: 这个地方有点迷糊 什么是safe 什么是unsafe 傻傻分不清楚 --&gt; &lt;div class="container container8"&gt; &lt;div class="box"&gt;box1&lt;/div&gt; &lt;div class="box"&gt;box2&lt;/div&gt; &lt;div class="box"&gt;box3&lt;/div&gt; &lt;div class="box"&gt;box4&lt;/div&gt; &lt;div class="box box5"&gt;box5&lt;/div&gt; &lt;/div&gt; &lt;div class="container container9"&gt; &lt;div class="box"&gt;box1&lt;/div&gt; &lt;div class="box"&gt;box2&lt;/div&gt; &lt;div class="box"&gt;box3&lt;/div&gt; &lt;div class="box"&gt;box4&lt;/div&gt; &lt;div class="box box5"&gt;box5&lt;/div&gt; &lt;/div&gt; &lt;!-- /* Overflow alignment */ --&gt; &lt;!-- TODO: 看不太出来效果的 --&gt; &lt;div class="container container10"&gt; &lt;div class="box"&gt;box1&lt;/div&gt; &lt;div class="box"&gt;box2&lt;/div&gt; &lt;div class="box"&gt;box3&lt;/div&gt; &lt;div class="box"&gt;box4&lt;/div&gt; &lt;div class="box box5"&gt;box5&lt;/div&gt; &lt;/div&gt; &lt;div class="container container11"&gt; &lt;div class="box"&gt;box1&lt;/div&gt; &lt;div class="box"&gt;box2&lt;/div&gt; &lt;div class="box"&gt;box3&lt;/div&gt; &lt;div class="box"&gt;box4&lt;/div&gt; &lt;div class="box box5"&gt;box5&lt;/div&gt; &lt;/div&gt; &lt;div class="container container12"&gt; &lt;div class="box"&gt;box1&lt;/div&gt; &lt;div class="box"&gt;box2&lt;/div&gt; &lt;div class="box"&gt;box3&lt;/div&gt; &lt;div class="box"&gt;box4&lt;/div&gt; &lt;div class="box box5"&gt;box5&lt;/div&gt; &lt;/div&gt; &lt;div class="container container13"&gt; &lt;div class="box"&gt;box1&lt;/div&gt; &lt;div class="box"&gt;box2&lt;/div&gt; &lt;div class="box"&gt;box3&lt;/div&gt; &lt;div class="box"&gt;box4&lt;/div&gt; &lt;div class="box box5"&gt;box5&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; css 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154* &#123; box-sizing: border-box; margin: 0; padding: 0;&#125;.container &#123; position: relative; width: 100%; margin: 50px auto 0; display: flex; flex-wrap: nowrap; border: 1px solid red;&#125;.container::before &#123; position: absolute; left: 0; top: 0; margin-top: -20px; width: 100%; text-align: center; height: 10px; line-height: 10px;&#125;.container &gt; .box &#123; width: 120px; text-align: center; height: 120px; line-height: 120px; text-align: center; border: 1px solid green;&#125;.container1 &#123; justify-content: center;&#125;.container1::before &#123; content: "container1 center";&#125;.container2 &#123; justify-content: flex-start;&#125;.container2::before &#123; content: "container2 flex-start";&#125;.container3 &#123; justify-content: flex-end;&#125;.container3::before &#123; content: "container3 flex-end";&#125;.container4 &#123; justify-content: space-around;&#125;.container4::before &#123; content: "container4 space-around";&#125;.container5 &#123; justify-content: space-between;&#125;.container5::before &#123; content: "container5 space-between";&#125;.container6 &#123; justify-content: space-evenly;&#125;.container6::before &#123; content: "container6 space-evenly";&#125;.container7 &#123; justify-content: stretch;&#125;.container7::before &#123; content: "container7 stretch";&#125;.container7 &gt; .box5 &#123; flex: 1 1 auto;&#125;.container7 &gt; .box3 &#123; flex: 1 1 auto;&#125;.container8 &#123; justify-content: safe center;&#125;.container8::before &#123; content: "container8 safe center";&#125;.container8 &gt; .box5 &#123; width: 200px;&#125;.container9 &#123; justify-content: unsafe center;&#125;.container9::before &#123; content: "container9 unsafe center";&#125;.container9 &gt; .box5 &#123; width: 200px;&#125;.container10 &#123; justify-content: start;&#125;.container10::before &#123; content: "container10 start";&#125;.container11 &#123; justify-content: end;&#125;.container11::before &#123; content: "container11 end";&#125;.container12 &#123; justify-content: left;&#125;.container12::before &#123; content: "container12 left";&#125;.container13 &#123; justify-content: right;&#125;.container13::before &#123; content: "container13 right";&#125; 参考 MDN justify-content Why doesn’t justify-content: stretch work?]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack优化（一）]]></title>
    <url>%2F2019%2F11%2F17%2Fwebpack%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[优化之前 优化之后 update plugin + loader项目中的依赖项1234567891011"devDependencies": &#123; "extract-text-webpack-plugin": "^3.0.0", "friendly-errors-webpack-plugin": "^1.6.1", "html-webpack-plugin": "^2.30.1", "optimize-css-assets-webpack-plugin": "^3.2.0", "uglifyjs-webpack-plugin": "^1.1.1", "webpack": "^3.6.0", "webpack-bundle-analyzer": "^2.9.0", "webpack-dev-server": "^2.9.1", "webpack-merge": "^4.1.0"&#125; 安装最新稳定版本plugin1npm i webpack@latest webpack-merge@latest webpack-dev-server@latest webpack-bundle-analyzer@latest uglifyjs-webpack-plugin@latest optimize-css-assets-webpack-plugin@latest html-webpack-plugin@latest friendly-errors-webpack-plugin@latest extract-text-webpack-plugin@latest -D 注意还包括webpack-cli 1npm i webpack-cli@latest -D loader1npm i vue-loader@latest eslint-loader@latest -D mode升级之后mode属性是必须制定的 否则按照约定优于配置原则 将默认按照production编译 webpack.dev.conf.js1234const devWebpackConfig = merge(baseWebpackConfig, &#123; mode: 'development', ...&#125;) webapck.prod.conf.js1234const webpackConfig = merge(baseWebpackConfig, &#123; mode: 'production', ...&#125;) 删除不需要的插件或者配置CommonsChunkPluginCommonsChunkPlugin was removed -&gt; optimization.splitChunks, optimization.runtimeChunk 123456789101112131415161718192021optimization: &#123; splitChunks: &#123; cacheGroups: &#123; vendor: &#123; test: /[\\/]node_modules[\\/]/, name: 'vendor', chunks: 'all', priority: 2, minChunks: 2 &#125;, common: &#123; test: /.js$/, name: 'common', chunks: 'initial', priority: 1, minChunks: 2 &#125; &#125; &#125;, runtimeChunk: &#123; name: 'runtime' &#125;&#125; uglifyjs-webpack-plugin生产环境下会走默认配置 如果需要定制一些配置的话再添加 在这里我直接删除了原先的配置并且移除了这个插件 1npm uninstall uglifyjs-webpack-plugin extract-text-webpack-plugin推荐的替代方案：mini-css-extract-plugin Vue loadervue-loader配置 引用 https://github.com/webpack/webpack/releases/tag/v4.0.0 https://juejin.im/post/5c3d81f451882524f2302bbd http://louiszhai.github.io/2019/01/04/webpack4/ https://blog.csdn.net/u013243347/article/details/88547730 https://www.twblogs.net/a/5c45dd21bd9eee35b21eef06/zh-cn]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[call() apply() and bind() in javaScript]]></title>
    <url>%2F2019%2F11%2F04%2Fcall-apply-and-bind-in-javaScript%2F</url>
    <content type="text"><![CDATA[老生常谈的问题 How-to: call() , apply() and bind() in JavaScript]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于JS数组你可能不知道的事情]]></title>
    <url>%2F2019%2F07%2F23%2F%E5%85%B3%E4%BA%8EJS%E6%95%B0%E7%BB%84%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B%E6%83%85%2F</url>
    <content type="text"><![CDATA[类数组JavaScript 提供是类数组（array-like）特性的对象 长度 length属性的值是一个0-2^32-1的整数 设置更大的length不会给数组分配更多的空间 而把length设小将导致所有下表大于等于新length的属性被删除 123// 这两种写法都可以number[’numbers.length] = ’shi’; // 这种性能是不是会更好一点？numbers.push(‘go); 删除123456delete numbers[2]; // 可以用delete运算符// numbers 是 [‘zero’, ‘one’, undefined, ’shi’, ‘go’]numbers.splice(2, 1); // 也可以用splice 一般用这个// numbers 是 [‘zero’, ‘one’, ’shi’, ‘go’]// 因为被删除属性后面的每个属性必须被移除，并且以一个新的键值重新插入，这对于大型数组来说可能会效率不高。--这个需要注意下 区分对象和数组1234567if (!Array.isArray) &#123; Array.isArray = function(arg) &#123; return Object.prototype.toString.call(arg) === '[object Array]'; &#125;;&#125;// 鲜为人知的事实：其实 Array.prototype 也是一个数组。Array.isArray(Array.prototype); 指定初始值一维数组指定初始值1234567891011121314Array.dim = function (dimension, initial) &#123; let arr = []; for (let i = 0; i &lt; dimension; i++) &#123; arr[i] = initial; &#125; return arr;&#125;var myArray = Array.dim(10, 1);var myArray2 = Array.dim(10, []); // 注意这样会导致变量都指向一个数组的引用 后果不堪设想// console.log(myArray);// console.log(myArray2);myArray2[3][9] = 1; // 不堪设想的后果// console.log(myArray2); // 后果不堪设想了 二维数组指定初始值12345678910111213141516171819202122232425262728293031323334if (!Array.isArray) &#123; Array.isArray = function (arg) &#123; return Object.prototype.toString.call(arg) === '[object Array]'; &#125;;&#125;Array.dim = function (m, n, initial) &#123; let r = []; for (let i = 0; i &lt; m; i++) &#123; r[i] = []; for (let j = 0; j &lt; n; j++) &#123; if (typeof initial === 'object') &#123; if (Array.isArray(initial)) &#123; r[i][j] = [ ...initial ]; &#125; else &#123; r[i][j] = &#123; ...initial &#125;; &#125; &#125; else &#123; r[i][j] = initial; &#125; &#125; &#125; return r;&#125;let myArray = Array.dim(10, 20, 0);let myArray2 = Array.dim(10, 20, [9, 10]);let myArray3 = Array.dim(10, 20, &#123; abc: 1 &#125;);myArray[0][1] = 9;myArray2[1][2][10] = 10;myArray3[1][2][0] = 1;// console.log(myArray);// console.log(myArray2);// console.log(myArray3); 实现单位矩阵12345678910Array.identity = function (n) &#123; let mat = Array.dim(n, n, 0); for (let index = 0; index &lt; n; index++) &#123; mat[index][index] = 1; &#125; return mat;&#125;let myArray4 = Array.identity(4);console.log(myArray4);]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Arrow Function]]></title>
    <url>%2F2019%2F07%2F17%2FArrow-Function%2F</url>
    <content type="text"><![CDATA[简介箭头函数允许我们用更简单的方式书写函数表达式 之前: 123hello = function() &#123; return "hello world!";&#125; 使用箭头函数之后: 123hello = () =&gt; &#123; return "hello world!";&#125; 表达式变得更加简短简洁！如果函数只有一个声明，而且声明返回了一个值，你可以移除花括号和return这个关键字 箭头函数默认返回值 1hello = () =&gt; "hello world!"; 注意：在函数只有一个声明的情况下才适用 如果有参数的情况下，你需要把参数传递到括号中 带参数的箭头函数 1hello = (val) =&gt; "hello" + val; 事实上，如果只有一个参数的情况下，你也可以省略括号 1hello = val =&gt; "hello" + val; 谈谈 this相对于普通函数来讲，箭头函数对 [this] 的处理是不同的。 简而言之，箭头函数在使用时并没有对 [this] 进行绑定。 在普通的函数中 [this] 关键字代表了调用函数的对象，这个对象可能是window，document，一个button按钮或别的。 使用箭头函数的时候 [this] 关键字代表了定义箭头函数的对象。 让我们用两个例子来理解这个区别。 两个例子都调用了同一个方法两次，第一次调用是在页面加载的时候(loads)，第二次是当用户点击一个按钮的时候。 第一个例子用了一个普通的函数，第二个例子用了箭头函数。 结果表明，第一个例子返回了两个不同的对象(window and button),第二个例子返回了两次window对象，因为window对象是箭头函数的所有者。 Example普通函数中，[this] 指向 调用 函数的对象 12345678910// 普通函数hello = function() =&gt; &#123; document.getElementById("demo").innerHTML += this;&#125;// window对象调用了这个函数window.addEventListener("load", hello);// button对象调用了这个函数document.getElementById("btn").addEventListener("click", hello); Example箭头函数中，[this] 指向 调用 函数的所有者 12345678910// 箭头函数hello = () =&gt; &#123; document.getElementById("demo").innerHTML += this;&#125;// window对象调用了这个函数window.addEventListener("load", hello);// button对象调用了这个函数document.getElementById("btn").addEventListener("click", hello); 当你用函数的时候记住这些不同。有时候普通函数的行为是你想要的，如果不是，用箭头函数。 Arrow Function | w3school]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Diy loading with h5 + css3]]></title>
    <url>%2F2019%2F07%2F07%2FDiy-loading-with-h5-css3%2F</url>
    <content type="text"><![CDATA[html 1234567891011121314&lt;div id='j_page-loading' class='m-actloading' style='background-color:rgba(4, 18, 34, 1)'&gt; &lt;div class='loading' style='color:rgba(255, 255, 255, 1)'&gt; &lt;div class='bars'&gt; &lt;span class='loading-bar b1' style='background-color:rgba(255, 255, 255, 1)'&gt;&lt;/span&gt; &lt;span class='loading-bar b2' style='background-color:rgba(255, 255, 255, 1)'&gt;&lt;/span&gt; &lt;span class='loading-bar b3' style='background-color:rgba(255, 255, 255, 1)'&gt;&lt;/span&gt; &lt;span class='loading-bar b4' style='background-color:rgba(255, 255, 255, 1)'&gt;&lt;/span&gt; &lt;span class='loading-bar b5' style='background-color:rgba(255, 255, 255, 1)'&gt;&lt;/span&gt; &lt;span class='loading-bar b6' style='background-color:rgba(255, 255, 255, 1)'&gt;&lt;/span&gt; &lt;span class='loading-bar b7' style='background-color:rgba(255, 255, 255, 1)'&gt;&lt;/span&gt; &lt;/div&gt; &lt;span class='loading-tip'&gt;loading&lt;i class='dots d1'&gt;.&lt;/i&gt;&lt;i class='dots d2'&gt;.&lt;/i&gt;&lt;i class='dots d3'&gt;.&lt;/i&gt;&lt;/span&gt; &lt;/div&gt;&lt;/div&gt; css 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142/* loading */.m-actloading &#123; position: fixed; z-index: 10000; top: 0; left: 0; width: 100%; height: 100%; background-color: hsla(0, 0%, 86%, .95); font-size: 16px; font-weight: 700; color: #d43c33; touch-action: none; -webkit-transition: all .6s ease-in; transition: all .6s ease-in; display: block;&#125;.m-actloading .loading &#123; position: absolute; top: 45%; left: 50%; margin-left: -22px; height: 28px; font-size: 0; text-align: center; white-space: nowrap&#125;.m-actloading .loading .bars &#123; width: 100%; height: 100%; overflow: hidden&#125;.m-actloading .loading .loading-bar &#123; display: inline-block; width: 2px; height: 100%; background-color: #d43c33; border-radius: 2px; -webkit-animation-name: loadingUpanddown; animation-name: loadingUpanddown; -webkit-animation-duration: .3s; animation-duration: .3s; -webkit-animation-timing-function: linear; animation-timing-function: linear; -webkit-animation-iteration-count: infinite; animation-iteration-count: infinite; -webkit-animation-direction: alternate; animation-direction: alternate; margin-right: 5px&#125;.m-actloading .loading .loading-bar:last-child &#123; margin-right: 0&#125;.m-actloading .loading .loading-bar.b1 &#123; -webkit-animation-delay: -.1s; animation-delay: -.1s&#125;.m-actloading .loading .loading-bar.b2 &#123; -webkit-animation-delay: -.2s; animation-delay: -.2s&#125;.m-actloading .loading .loading-bar.b3 &#123; -webkit-animation-delay: -.3s; animation-delay: -.3s&#125;.m-actloading .loading .loading-bar.b4 &#123; -webkit-animation-delay: -.4s; animation-delay: -.4s&#125;.m-actloading .loading .loading-bar.b5 &#123; -webkit-animation-delay: -.5s; animation-delay: -.5s&#125;.m-actloading .loading .loading-bar.b6 &#123; -webkit-animation-delay: -.6s; animation-delay: -.6s&#125;.m-actloading .loading .loading-bar.b7 &#123; -webkit-animation-delay: -.7s; animation-delay: -.7s&#125;.m-actloading .loading .loading-tip &#123; position: absolute; top: 41px; left: 50%; margin-left: -50%; font-size: 12px; opacity: .8&#125;.m-actloading .loading .loading-tip .dots &#123; -webkit-animation: 1s ease 0s infinite alternate loadingDots; animation: 1s ease 0s infinite alternate loadingDots&#125;.m-actloading .loading .loading-tip .dots.d2 &#123; -webkit-animation: 1s ease -.1s infinite alternate loadingDots; animation: 1s ease -.1s infinite alternate loadingDots&#125;.m-actloading .loading .loading-tip .dots.d3 &#123; -webkit-animation: 1s ease -.2s infinite alternate loadingDots; animation: 1s ease -.2s infinite alternate loadingDots&#125;@-webkit-keyframes loadingUpanddown &#123; to &#123; -webkit-transform: translateY(100%); transform: translateY(100%) &#125;&#125;@keyframes loadingUpanddown &#123; to &#123; -webkit-transform: translateY(100%); transform: translateY(100%) &#125;&#125;@-webkit-keyframes loadingDots &#123; to &#123; opacity: 0 &#125;&#125;@keyframes loadingDots &#123; to &#123; opacity: 0 &#125;&#125;]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
</search>
